mulesoft_traceability_agent:
  central:
    # Amplify organization ID to which to publish the metrics. The value for organizationID can be found in Amplify Central Platform > Organization
    # MUST BE CONFIGURED
    organizationID: "<AMPLIFY_ORG_ID>"

    # The name of the Amplify Central environment where the metrics will be published to
    # MUST BE CONFIGURED
    environment: <AMPLIFY_CENTRAL_ENVIRONMENT_NAME>

    auth:
      # The value for service account client Id can be found in Amplify Central > Access > Service account
      # MUST BE CONFIGURED
      clientID: <AMPLIFY_CENTRAL_DOSA_CLIENT_ID>

      # The path to the public and private keys used for creating the service account
      # Absolute path is recommended when installing as a Linux service
      privateKey: <AMPLIFY_CENTRAL_DOSA_PRIVATE_KEY_PATH>
      publicKey: <AMPLIFY_CENTRAL_DOSA_PUBLIC_KEY_PATH>

#
# Mulesoft connectivity
#
mulesoft:
  # The Mulesoft Anypoint Exchange endpoint
  #anypointExchangeUrl: https://anypoint.mulesoft.com
  
  # The Mulesoft environment to connect to.
  environment: Sandbox
  auth:
    # The credentials used to connect to Mulesoft
    username: <USERNAME>
    password: <PASSWORD>
    # The session lifetime, access tokens are automatically refreshed at 75% of this time.
    lifetime: <SESSION LIFETIME>

# Condor Ingestion service
output.traceability:
  enabled: true
  hosts:
   - ${TRACEABILITY_HOST:"ingestion-lumberjack.datasearch.axway.com:453"}
  protocol: ${TRACEABILITY_PROTOCOL:"tcp"}
  compression_level: ${TRACEABILITY_COMPRESSIONLEVEL:3}
  ssl:
    enabled: true
    verification_mode: none
    cipher_suites:
      - "ECDHE-ECDSA-AES-128-GCM-SHA256"
      - "ECDHE-ECDSA-AES-256-GCM-SHA384"
      - "ECDHE-ECDSA-CHACHA20-POLY1305"
      - "ECDHE-RSA-AES-128-CBC-SHA256"
      - "ECDHE-RSA-AES-128-GCM-SHA256"
      - "ECDHE-RSA-AES-256-GCM-SHA384"
      - "ECDHE-RSA-CHACHA20-POLY1205"
  worker: 1
  pipelining: 0
  proxy_url: ${TRACEABILITY_PROXYURL:""}
log:
  level: debug
  format: json
  output: stdout
  path: logs
  maskedValues:
logging:
  metrics:
    enabled: false
  # Send all logging output to stderr
  to_stderr: true
  # Set log level
  level: ${LOG_LEVEL:debug}